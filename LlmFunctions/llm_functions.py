from langchain import PromptTemplate, LLMChain
from langchain.chat_models import ChatOpenAI
import json


llm = ChatOpenAI(model='gpt-3.5-turbo', temperature=0.7)


def fix_json(json_to_fix):
    template = """I have some broken JSON below that I need to be able to run json.loads() on.  Can you fix it for me? Thanks.\n\n{question}"""
    prompt_from_template = PromptTemplate(template=template, input_variables=["question"])
    llm_chain = LLMChain(prompt=prompt_from_template,llm=llm, verbose=True)
    response = llm_chain.run(json_to_fix)
    return response

def genMemoriesFromBackstory(backstory:str)->list:
    '''the purpose of this function is to generate a list of observations/memories
    from the written prose version of the backstory of an NPC (or maybe another entity, i dont know).
    These can then be utilized during game-init to generate an initial starting index of NPC
    LTM (long term memories).  This function is to be generated by the game editor.  The memories are 
    passed back to the game editor, then saved in MongoDB.  They're loaded during game-init and turned into 
    a game-specific, user-specific vector index.'''
    template = """I want you to convert an NPC agent backstory into a set of observations where an observation is an event directly perceived by that agent. Common observations include behaviors performed by the agent themselves or behaviors that agents perceive being performed by other agents or non-agent objects.  Utilize proper nouns wherever possible.
    
    '''''
    The backstory is: {backstory}
    
    '''''
    You must format your output as a JSON dictionary that adheres to the following JSON schema instance:
    'observations': The list of observations
    """
    prompt_from_template = PromptTemplate(template=template, input_variables=["backstory"])
    llm_chain = LLMChain(prompt=prompt_from_template,llm=llm, verbose=True)
    response = llm_chain.run(backstory)
    try:
        response = json.loads(response)
    except:
        response = fix_json(response)
        response = json.loads(response)
    return response['observations']